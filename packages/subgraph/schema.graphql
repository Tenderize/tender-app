type TenderizeGlobal @entity { # Global Values/ TODO: better name?
  "Fixed ID of '1'"
  id: ID!
  "List of congifs for all integrations"
  configs: [ProtocolConfig!]!
  # TODO: Add global totals 
}

type ProtocolConfig @entity {
  "ID: Name of the protocol eg. 'livepeer'"
  id: ID!
  "Address of the ERC20 token for integration"
  steak: String!
  "Address of Tenderizer"
  tenderizer: String!
  "Address of ERC20 Tender Token"
  tenderToken: String!
  "Address of Elastic Supply Pool"
  esp: String!
  "Address of liquidity pool for pair"
  bpool: String!
  "Address of TenderFarm contract"
  tenderFarm: String!
}

type Protocol @entity {
  "Name of the protocol eg. 'livepeer'"
  id: ID!
  "Tenderizer Data"
  tenderizer: Tenderizer @derivedFrom(field: "protocol")
  "TenderFarm Data"
  tenderFarm: TenderFarm @derivedFrom(field: "protocol")
  "Paritcipating user list"
  users: [UserProtocol!] @derivedFrom(field: "protocol")
  "Count of users participated in Protocol"
  userCount: BigInt!
}

type Tenderizer @entity {
  "Name of the protocol eg. 'livepeer'"
  id: ID!
  "Protocol entity"
  protocol: Protocol!

  "Total amount depositied in tenderizer"
  deposits: BigDecimal!
  "Total number of tenderizer depostis"
  depositCount: BigInt!
  "Total amount withdrawn from tenderizer"
  withdrawals: BigDecimal!
  "Total number of tenderizer withdrawals"
  withdrawalCount: BigInt!
  "Total rewards collected from protocol"
  rewards: BigDecimal!
  "Total number of times rewards were collected"
  rewardCount: BigInt!
  "Total depsotis + total rewards - total withdrawals"
  currentPrincipal: BigDecimal!

  "Total amount of protocol fees collected from tenderizer"
  protocolFees: BigDecimal!
  "Total amount of liquidity fees collected from tenderizer"
  liquidityFees: BigDecimal!

  "Day data for tenderizer"
  dayData: [TenderizerDay!]! @derivedFrom(field: "tenderizer")
}

type TenderFarm @entity {
  "Name of the protocol eg. 'livepeer'"
  id: ID!
  "Protocol"
  protocol: Protocol!

  "Total deposits made into farm"
  deposits: BigDecimal!
  "Total number of depostits made"
  depositCount: BigInt!
  "Total withrawals made from farm"
  withdrawals: BigDecimal!
  "Total number of withdrawals made"
  withdrawalCount: BigInt!
  "Total rewards collected from farm"
  harvest: BigDecimal!
  "Total number of harvests made"
  harvestCount: BigInt!
  "Total depsotis - total withdrawals"
  currentPrincipal: BigDecimal!

  "Day data for tenderFarm"
  dayData: [TenderFarmDay!]! @derivedFrom(field: "tenderFarm")
}

type TenderizerDay @entity {
  "<Timestamp rounded to current day by dividing by 86400>_<portocol>"
  id: ID!
  "Tenderizer"
  tenderizer: Tenderizer!
  "The date beginning at 12:00am UTC"
  date: Int!

  "deposits volume in tenderizer for the day"
  deposits: BigDecimal!
  "withdraw volume in tenderizer for the day"
  withdrawals: BigDecimal!
  "Total volume for the day: deposits - withdrawals"
  volume: BigDecimal!
  "cumulative deposit on that day"
  cumulativeVolume: BigDecimal!

  "staking rewards collected from protocol for the day"
  rewards: BigDecimal!
  "cumulative staking rewards collected"
  cumulativeRewards: BigDecimal!
}

type TenderFarmDay @entity {
  "<Timestamp rounded to current day by dividing by 86400>_<portocol>"
  id: ID!
  "TenderFarm"
  tenderFarm: TenderFarm!
  "The date beginning at 12:00am UTC"
  date: Int!

  "farm volume for the day"
  deposits: BigDecimal!
  "unfarm volume for the day"
  withdrawals: BigDecimal!
  "Total volume for the day: farm - unfarm"
  volume: BigDecimal!
  "cumulative farm on that day"
  cumulativeVolume: BigDecimal! 

  "harvest volume for the day"
  harvest: BigDecimal!
  "cumulative harvest on that day"
  cumulatinveHarvest: BigDecimal!
}

type User @entity {
  "Wallet address of user"
  id: ID!
  "Data for each integration per user"
  protocols: [UserProtocol!]! @derivedFrom(field: "user")
}

type UserProtocol @entity { 
  "<wallet-address>_<portocol>"
  id: ID!
  "Protocol"
  protocol: Protocol!
  "User"
  user: User!

  "Total amount depositied in tenderizer by user"
  tenderizerDeposits: BigDecimal!
  "Total amount withdrawn from tenderizer by user"
  tenderizerWithdrawals: BigDecimal!

  "Total amount depositied in farm by user"
  farmDeposits: BigDecimal!
  "Total amount withdrawn from farm by  user"
  farmWithdrawals: BigDecimal!
  "Total amount harvest collected from farm by  user"
  farmHarvest: BigDecimal!
}

# Registry event entity
type TenderizerCreatedEvent @entity {
  id: ID!
  name: String!
  steak: String!
  tenderizer: String!
  tenderToken: String!
  esp: String!
  bpool: String!
  tenderFarm: String!
  timestamp: BigInt!
}

# Tenderizer Event entities
type DepositEvent @entity {
  id: ID!
  tenderizer: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}

type StakeEvent @entity {
  id: ID!
  tenderizer: String!
  node: String!
  amount: BigInt!
  timestamp: BigInt!
}

type UnstakeEvent @entity {
  id: ID!
  tenderizer: String!
  from: String!
  node: String!
  amount: BigInt!
  timestamp: BigInt!
}

type WithdrawEvent @entity {
  id: ID!
  tenderizer: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}

type RewardsClaimedEvent @entity {
  id: ID!
  tenderizer: String!
  rewards: BigInt!
  currentPrincipal: BigInt!
  timestamp: BigInt!
}

type ProtocolFeeCollectedEvent @entity {
  id: ID!
  tenderizer: String!
  amount: BigInt!
  timestamp: BigInt!
}

type LiquidityFeeCollectedEvent @entity {
  id: ID!
  tenderizer: String!
  amount: BigInt!
  timestamp: BigInt!
}

# TenderFarm Event entities
type FarmEvent @entity {
  id: ID!
  tenderFarm: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}

type UnfarmEvent @entity {
  id: ID!
  tenderFarm: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}

type HarvestEvent @entity {
  id: ID!
  tenderFarm: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}