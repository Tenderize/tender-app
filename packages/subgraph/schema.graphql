type TenderizeGlobal @entity { # Global Values/ TODO: better name?
  "Fixed ID of '1'"
  id: ID!
  "List of congifs for all integrations"
  configs: [ProtocolConfig!]!
  # TODO: Add global totals 
}

type ProtocolConfig @entity {
  "ID: Name of the protocol eg. 'livepeer'"
  id: ID!
  "Address of the ERC20 token for integration"
  steak: String!
  "Address of Tenderizer"
  tenderizer: String!
  "Address of ERC20 Tender Token"
  tenderToken: String!
  "Address of Elastic Supply Pool"
  esp: String!
  "Address of liquidity pool for pair"
  bpool: String!
  "Address of TenderFarm contract"
  tenderFarm: String!
}

type Protocol @entity {
  "Name of the protocol eg. 'livepeer'"
  id: ID!

  "Total amount depositied in tenderizer"
  tenderizerDeposits: BigDecimal!
  "Total amount withdrawn from tenderizer"
  tenderizerWithdrawals: BigDecimal!
  "Total rewards collected from protocol"
  rewards: BigDecimal!

  "Total amount of protocol fees collected from tenderizer"
  protocolFees: BigDecimal!
  "Total amount of liquidity fees collected from tenderizer"
  liquidityFees: BigDecimal!

  "Total deposits made into farm"
  farmDeposits: BigDecimal!
  "Total withrawals made from farm"
  farmWithdrawals: BigDecimal!
  "Total rewards collected from farm"
  farmHarvest: BigDecimal!
}

type User @entity {
  "Wallet address of user"
  id: ID!
  "Data for each integration per user"
  tenderizerData: [UserProtocolData!]!
}

type UserProtocolData @entity { 
  "<wallet-address>_<portocol> eg.'0xfA668FB97697200FA56ce98E246db61Cc7E14Bd5_livepeer'"
  id: ID!
  "Name of the protocol eg. 'livepeer'"
  protocol: String!

  "Total amount depositied in tenderizer by given user"
  tenderizerDeposits: BigDecimal!
  "Total amount depositied in tenderizer by given user"
  tenderizerWithdrawals: BigDecimal!

  "Total amount depositied in farm by given user"
  farmDeposits: BigDecimal!
  "Total amount withdrawn from farm by given user"
  farmWithdrawals: BigDecimal!
  "Total amount harvest collected from farm by given user"
  farmHarvest: BigDecimal!
}


# Entities for timeseries 
type Day @entity{
  "<Timestamp rounded to current day by dividing by 86400>_<protocol>"
  id: ID!
  "The date beginning at 12:00am UTC"
  date: Int!
  "Name of protocol eg. 'livepeer'"
  protocol: String!

  "total deposits/withdrawals in tenderizer for the day"
  tenderizerDepositVolume: BigDecimal!
  "cumulative deposit on that day"
  totalTenderizerDeposit: BigDecimal!

  "staking rewards collected from protocol for the day"
  rewardsVolume: BigDecimal!
  "cumulative staking rewards collected"
  totalRewards: BigDecimal!

  "farm/unfarm volume for the day"
  farmVolume: BigDecimal!
  "cumulative farm on that day"
  totalFarm: BigDecimal! 

  "harvest volume for the day"
  farmtHarvestVolume: BigDecimal!
  "cumulative harvest on that day"
  totalFarmHarvest: BigDecimal!
}

# Registry event entity
type TenderizerCreatedEvent @entity {
  id: ID!
  name: String!
  steak: String!
  tenderizer: String!
  tenderToken: String!
  esp: String!
  bpool: String!
  tenderFarm: String!
  timestamp: BigInt!
}

# Tenderizer Event entities
type DepositEvent @entity {
  id: ID!
  tenderizer: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}

type StakeEvent @entity {
  id: ID!
  tenderizer: String!
  node: String!
  amount: BigInt!
  timestamp: BigInt!
}

type UnstakeEvent @entity {
  id: ID!
  tenderizer: String!
  from: String!
  node: String!
  amount: BigInt!
  timestamp: BigInt!
}

type WithdrawEvent @entity {
  id: ID!
  tenderizer: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}

type RewardsClaimedEvent @entity {
  id: ID!
  tenderizer: String!
  rewards: BigInt!
  currentPrincipal: BigInt!
  timestamp: BigInt!
}

type ProtocolFeeCollectedEvent @entity {
  id: ID!
  tenderizer: String!
  amount: BigInt!
  timestamp: BigInt!
}

type LiquidityFeeCollectedEvent @entity {
  id: ID!
  tenderizer: String!
  amount: BigInt!
  timestamp: BigInt!
}

# TenderFarm Event entities
type FarmEvent @entity {
  id: ID!
  tenderFarm: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}

type UnfarmEvent @entity {
  id: ID!
  tenderFarm: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}

type HarvestEvent @entity {
  id: ID!
  tenderFarm: String!
  from: String!
  amount: BigInt!
  timestamp: BigInt!
}