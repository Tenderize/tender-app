/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TenderFarmInterface extends utils.Interface {
  contractName: "TenderFarm";
  functions: {
    "CRF()": FunctionFragment;
    "addRewards(uint256)": FunctionFragment;
    "availableRewards(address)": FunctionFragment;
    "farm(uint256)": FunctionFragment;
    "farmFor(address,uint256)": FunctionFragment;
    "farmWithPermit(uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "harvest()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "nextTotalStake()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "setTenderizer(address)": FunctionFragment;
    "stakeOf(address)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "tenderizer()": FunctionFragment;
    "token()": FunctionFragment;
    "totalStake()": FunctionFragment;
    "unfarm(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CRF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "farm", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "farmFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmWithPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTotalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitIfNecessary",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTenderizer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stakeOf", values: [string]): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tenderizer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unfarm",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CRF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTotalStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitIfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTenderizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tenderizer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unfarm", data: BytesLike): Result;

  events: {
    "Farm(address,uint256)": EventFragment;
    "Harvest(address,uint256)": EventFragment;
    "RewardsAdded(uint256)": EventFragment;
    "Unfarm(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Farm"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfarm"): EventFragment;
}

export type FarmEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amount: BigNumber }
>;

export type FarmEventFilter = TypedEventFilter<FarmEvent>;

export type HarvestEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amount: BigNumber }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type RewardsAddedEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type RewardsAddedEventFilter = TypedEventFilter<RewardsAddedEvent>;

export type UnfarmEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amount: BigNumber }
>;

export type UnfarmEventFilter = TypedEventFilter<UnfarmEvent>;

export interface TenderFarm extends BaseContract {
  contractName: "TenderFarm";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TenderFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CRF(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableRewards(
      _for: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    farm(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmWithPermit(
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _stakeToken: string,
      _rewardToken: string,
      _tenderizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextTotalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    selfPermit(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selfPermitIfNecessary(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTenderizer(
      _tenderizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeOf(_of: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stake: BigNumber; lastCRF: BigNumber }
    >;

    tenderizer(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    unfarm(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CRF(overrides?: CallOverrides): Promise<BigNumber>;

  addRewards(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableRewards(_for: string, overrides?: CallOverrides): Promise<BigNumber>;

  farm(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmFor(
    _for: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmWithPermit(
    _amount: BigNumberish,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _stakeToken: string,
    _rewardToken: string,
    _tenderizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextTotalStake(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  selfPermit(
    _token: string,
    _value: BigNumberish,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selfPermitIfNecessary(
    _token: string,
    _value: BigNumberish,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTenderizer(
    _tenderizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeOf(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { stake: BigNumber; lastCRF: BigNumber }>;

  tenderizer(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  unfarm(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CRF(overrides?: CallOverrides): Promise<BigNumber>;

    addRewards(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    availableRewards(
      _for: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farm(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    farmFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    farmWithPermit(
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(overrides?: CallOverrides): Promise<void>;

    initialize(
      _stakeToken: string,
      _rewardToken: string,
      _tenderizer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nextTotalStake(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    selfPermit(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermitIfNecessary(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTenderizer(
      _tenderizer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeOf(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stake: BigNumber; lastCRF: BigNumber }
    >;

    tenderizer(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    unfarm(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Farm(address,uint256)"(
      account?: string | null,
      amount?: null
    ): FarmEventFilter;
    Farm(account?: string | null, amount?: null): FarmEventFilter;

    "Harvest(address,uint256)"(
      account?: string | null,
      amount?: null
    ): HarvestEventFilter;
    Harvest(account?: string | null, amount?: null): HarvestEventFilter;

    "RewardsAdded(uint256)"(amount?: null): RewardsAddedEventFilter;
    RewardsAdded(amount?: null): RewardsAddedEventFilter;

    "Unfarm(address,uint256)"(
      account?: string | null,
      amount?: null
    ): UnfarmEventFilter;
    Unfarm(account?: string | null, amount?: null): UnfarmEventFilter;
  };

  estimateGas: {
    CRF(overrides?: CallOverrides): Promise<BigNumber>;

    addRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableRewards(
      _for: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farm(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmWithPermit(
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _stakeToken: string,
      _rewardToken: string,
      _tenderizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextTotalStake(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    selfPermit(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selfPermitIfNecessary(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTenderizer(
      _tenderizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeOf(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tenderizer(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    unfarm(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CRF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableRewards(
      _for: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farm(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmFor(
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmWithPermit(
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _stakeToken: string,
      _rewardToken: string,
      _tenderizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextTotalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selfPermit(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selfPermitIfNecessary(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTenderizer(
      _tenderizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeOf(
      _of: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tenderizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unfarm(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
