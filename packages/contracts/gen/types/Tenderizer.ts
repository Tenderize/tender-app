/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TenderizerInterface extends utils.Interface {
  contractName: "Tenderizer";
  functions: {
    "batchExecute(address[],uint256[],bytes[])": FunctionFragment;
    "calcDepositOut(uint256)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "collectFees()": FunctionFragment;
    "collectLiquidityFees()": FunctionFragment;
    "currentPrincipal()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "execute(address,uint256,bytes)": FunctionFragment;
    "gov()": FunctionFragment;
    "liquidityFee()": FunctionFragment;
    "node()": FunctionFragment;
    "pendingFees()": FunctionFragment;
    "pendingLiquidityFees()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setLiquidityFee(uint256)": FunctionFragment;
    "setNode(address)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "setStakingContract(address)": FunctionFragment;
    "setSteak(address)": FunctionFragment;
    "setTenderFarm(address)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "steak()": FunctionFragment;
    "tenderFarm()": FunctionFragment;
    "tenderSwap()": FunctionFragment;
    "tenderToken()": FunctionFragment;
    "totalStakedTokens()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "unstakeLocks(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchExecute",
    values: [string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calcDepositOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectLiquidityFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPrincipal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "node", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLiquidityFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitIfNecessary",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLiquidityFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setNode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setSteak", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTenderFarm",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "steak", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tenderFarm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tenderSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tenderToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeLocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcDepositOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectLiquidityFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "node", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingLiquidityFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitIfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSteak", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTenderFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "steak", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tenderFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tenderSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tenderToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "GovernanceUpdate(string)": EventFragment;
    "LiquidityFeeCollected(uint256)": EventFragment;
    "ProtocolFeeCollected(uint256)": EventFragment;
    "RewardsClaimed(int256,uint256,uint256)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type GovernanceUpdateEvent = TypedEvent<[string], { _param: string }>;

export type GovernanceUpdateEventFilter =
  TypedEventFilter<GovernanceUpdateEvent>;

export type LiquidityFeeCollectedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type LiquidityFeeCollectedEventFilter =
  TypedEventFilter<LiquidityFeeCollectedEvent>;

export type ProtocolFeeCollectedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ProtocolFeeCollectedEventFilter =
  TypedEventFilter<ProtocolFeeCollectedEvent>;

export type RewardsClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { stakeDiff: BigNumber; currentPrincipal: BigNumber; oldPrincipal: BigNumber }
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export type StakeEvent = TypedEvent<
  [string, BigNumber],
  { node: string; amount: BigNumber }
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export type UnstakeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { from: string; node: string; amount: BigNumber; unstakeLockID: BigNumber }
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; amount: BigNumber; unstakeLockID: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Tenderizer extends BaseContract {
  contractName: "Tenderizer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TenderizerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchExecute(
      _targets: string[],
      _values: BigNumberish[],
      _datas: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcDepositOut(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectLiquidityFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentPrincipal(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositWithPermit(
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    liquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    node(overrides?: CallOverrides): Promise<[string]>;

    pendingFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingLiquidityFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    selfPermit(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selfPermitIfNecessary(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityFee(
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNode(
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingContract(
      _stakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSteak(
      _steak: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTenderFarm(
      _tenderFarm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    steak(overrides?: CallOverrides): Promise<[string]>;

    tenderFarm(overrides?: CallOverrides): Promise<[string]>;

    tenderSwap(overrides?: CallOverrides): Promise<[string]>;

    tenderToken(overrides?: CallOverrides): Promise<[string]>;

    totalStakedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeLocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { amount: BigNumber; account: string }>;

    withdraw(
      _unstakeLockID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchExecute(
    _targets: string[],
    _values: BigNumberish[],
    _datas: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcDepositOut(
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectLiquidityFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentPrincipal(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositWithPermit(
    _amount: BigNumberish,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _target: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gov(overrides?: CallOverrides): Promise<string>;

  liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  node(overrides?: CallOverrides): Promise<string>;

  pendingFees(overrides?: CallOverrides): Promise<BigNumber>;

  pendingLiquidityFees(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  selfPermit(
    _token: string,
    _value: BigNumberish,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selfPermitIfNecessary(
    _token: string,
    _value: BigNumberish,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityFee(
    _liquidityFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNode(
    _node: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingContract(
    _stakingContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSteak(
    _steak: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTenderFarm(
    _tenderFarm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  steak(overrides?: CallOverrides): Promise<string>;

  tenderFarm(overrides?: CallOverrides): Promise<string>;

  tenderSwap(overrides?: CallOverrides): Promise<string>;

  tenderToken(overrides?: CallOverrides): Promise<string>;

  totalStakedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeLocks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { amount: BigNumber; account: string }>;

  withdraw(
    _unstakeLockID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchExecute(
      _targets: string[],
      _values: BigNumberish[],
      _datas: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    calcDepositOut(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    collectFees(overrides?: CallOverrides): Promise<BigNumber>;

    collectLiquidityFees(overrides?: CallOverrides): Promise<BigNumber>;

    currentPrincipal(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositWithPermit(
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    gov(overrides?: CallOverrides): Promise<string>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    node(overrides?: CallOverrides): Promise<string>;

    pendingFees(overrides?: CallOverrides): Promise<BigNumber>;

    pendingLiquidityFees(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    selfPermit(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermitIfNecessary(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setLiquidityFee(
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNode(_node: string, overrides?: CallOverrides): Promise<void>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingContract(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSteak(_steak: string, overrides?: CallOverrides): Promise<void>;

    setTenderFarm(
      _tenderFarm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    steak(overrides?: CallOverrides): Promise<string>;

    tenderFarm(overrides?: CallOverrides): Promise<string>;

    tenderSwap(overrides?: CallOverrides): Promise<string>;

    tenderToken(overrides?: CallOverrides): Promise<string>;

    totalStakedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeLocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { amount: BigNumber; account: string }>;

    withdraw(
      _unstakeLockID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256)"(
      from?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(from?: string | null, amount?: null): DepositEventFilter;

    "GovernanceUpdate(string)"(_param?: null): GovernanceUpdateEventFilter;
    GovernanceUpdate(_param?: null): GovernanceUpdateEventFilter;

    "LiquidityFeeCollected(uint256)"(
      amount?: null
    ): LiquidityFeeCollectedEventFilter;
    LiquidityFeeCollected(amount?: null): LiquidityFeeCollectedEventFilter;

    "ProtocolFeeCollected(uint256)"(
      amount?: null
    ): ProtocolFeeCollectedEventFilter;
    ProtocolFeeCollected(amount?: null): ProtocolFeeCollectedEventFilter;

    "RewardsClaimed(int256,uint256,uint256)"(
      stakeDiff?: null,
      currentPrincipal?: null,
      oldPrincipal?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      stakeDiff?: null,
      currentPrincipal?: null,
      oldPrincipal?: null
    ): RewardsClaimedEventFilter;

    "Stake(address,uint256)"(
      node?: string | null,
      amount?: null
    ): StakeEventFilter;
    Stake(node?: string | null, amount?: null): StakeEventFilter;

    "Unstake(address,address,uint256,uint256)"(
      from?: string | null,
      node?: string | null,
      amount?: null,
      unstakeLockID?: null
    ): UnstakeEventFilter;
    Unstake(
      from?: string | null,
      node?: string | null,
      amount?: null,
      unstakeLockID?: null
    ): UnstakeEventFilter;

    "Withdraw(address,uint256,uint256)"(
      from?: string | null,
      amount?: null,
      unstakeLockID?: null
    ): WithdrawEventFilter;
    Withdraw(
      from?: string | null,
      amount?: null,
      unstakeLockID?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    batchExecute(
      _targets: string[],
      _values: BigNumberish[],
      _datas: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcDepositOut(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectLiquidityFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentPrincipal(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositWithPermit(
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    node(overrides?: CallOverrides): Promise<BigNumber>;

    pendingFees(overrides?: CallOverrides): Promise<BigNumber>;

    pendingLiquidityFees(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    selfPermit(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selfPermitIfNecessary(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityFee(
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNode(
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingContract(
      _stakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSteak(
      _steak: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTenderFarm(
      _tenderFarm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    steak(overrides?: CallOverrides): Promise<BigNumber>;

    tenderFarm(overrides?: CallOverrides): Promise<BigNumber>;

    tenderSwap(overrides?: CallOverrides): Promise<BigNumber>;

    tenderToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeLocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _unstakeLockID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchExecute(
      _targets: string[],
      _values: BigNumberish[],
      _datas: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcDepositOut(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectLiquidityFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentPrincipal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    node(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingLiquidityFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selfPermit(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selfPermitIfNecessary(
      _token: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityFee(
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNode(
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingContract(
      _stakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSteak(
      _steak: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTenderFarm(
      _tenderFarm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    steak(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tenderFarm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tenderSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tenderToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeLocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _unstakeLockID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
